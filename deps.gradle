/**
 * Start version
 */
def versions = [:]
versions.gradle = '4.1.3'
versions.navSafeArgs = "2.3.3"
versions.firebaseAppDistGradle = "1.3.1"
versions.playServicesGradle = "4.3.5"
versions.firebaseCrashlyticsGradle = '2.5.2'

/**
 *
 * AndroidX
 */
versions.appCompat = "1.2.0"
versions.coreKtx = '1.3.2'
versions.constraint = '2.0.4'
versions.coordinator = "1.1.0"
versions.navigation = '2.3.5'
versions.multidex = "2.0.1"
versions.fragment = '1.3.3'
versions.room = '2.3.0'

//Arch component
versions.lifecycle = '2.3.1'

//Kotlin
versions.kotlin = '1.6.0'
versions.coroutinesCore = "1.3.9"

//Google's
versions.gson = "2.8.6"
versions.material = '1.3.0'
versions.playServices = "17.0.0"
versions.firebaseAnalytics = "17.4.3"
versions.firebaseCrashlytics = "17.1.0"
versions.firebaseBom = '27.0.0'

versions.flexbox = "2.0.1"

//Media
versions.glide = '4.12.0'

//Networks
versions.retrofit = "2.9.0"
versions.okhttp = '4.9.0'

//DI
versions.javaxAnnotation = "1.0"
versions.javaxInject = "1"
versions.dagger = '2.33'
versions.glassFishAnnotation = "10.0-b28"
versions.hilt = '2.40.5'

//Testing
versions.testCore = '1.3.0'
versions.jUnit = '4.13.2'
versions.mockitoCore = '3.9.0'
versions.mockitoAndroid = '3.2.4'
versions.mockitoKotlin = '4.0.0'
versions.extjUnit = "1.1.2"
versions.truth = '1.3.0'
versions.rules = '1.3.0'
versions.espresso = "3.3.0"
versions.archComponent = "2.1.0"
versions.coroutinesTest = "1.6.4"

//Additional
versions.slidingButton = "2.0.0"
versions.mpchart = 'v3.1.0'

ext.versions = versions

def build_version = [:]
build_version.minSdk = 21
build_version.targetSdk = 30
build_version.compileSdk = 30
build_version.buildTools = '30.0.2'

ext.build_version = build_version

/**
 * Start classpath
 */
def classpaths = [:]

classpaths.kotlin = "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
classpaths.gradle = "com.android.tools.build:gradle:${versions.gradle}"
classpaths.navSafeArgs = "androidx.navigation:navigation-safe-args-gradle-plugin:${versions.navSafeArgs}"

//google's
classpaths.playServices = "com.google.gms:google-services:${versions.playServicesGradle}"
classpaths.firebaseAppDist = "com.google.firebase:firebase-appdistribution-gradle:${versions.firebaseAppDistGradle}"
classpaths.firebaseCrashlytics = "com.google.firebase:firebase-crashlytics-gradle:${versions.firebaseCrashlyticsGradle}"
classpaths.hilt = "com.google.dagger:hilt-android-gradle-plugin:${versions.hilt}"

ext.classpaths = classpaths

/**
 * Start Deps as dependencies collection
 * Start commons AndroidX dependencies
 */
def deps = [:]

def androidx = [:]
androidx.appCompat = "androidx.appcompat:appcompat:${versions.appCompat}"
androidx.coreKtx = "androidx.core:core-ktx:${versions.coreKtx}"
androidx.constraintLayout = "androidx.constraintlayout:constraintlayout:${versions.constraint}"
androidx.constraintLayoutSolver = "androidx.constraintlayout:constraintlayout-solver:${versions.constraint}"
androidx.coordinatorLayout = "androidx.coordinatorlayout:coordinatorlayout:${versions.coordinator}"
androidx.navigationUI = "androidx.navigation:navigation-ui-ktx:${versions.navigation}"
androidx.navigationFragment = "androidx.navigation:navigation-fragment-ktx:${versions.navigation}"
androidx.multidex = "androidx.multidex:multidex:${versions.multidex}"
androidx.fragment = "androidx.fragment:fragment-ktx:${versions.fragment}"

deps.androidx = androidx

/**
 * Start kotlin dependencies
 */
def kotlin = [:]
kotlin.kotlin = "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
kotlin.coroutinesCore = "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutinesCore}"
kotlin.coroutinesAndroid = "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutinesCore}"

deps.kotlin = kotlin

/**
 * Start lifecycle dependencies
 */
def lifecycle = [:]
lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:${versions.lifecycle}"
lifecycle.extentions = "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle}"
lifecycle.viewModel = "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
lifecycle.liveData = "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle}"
lifecycle.savedState = "androidx.lifecycle:lifecycle-viewmodel-savedstate:${versions.lifecycle}"
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:${versions.lifecycle}"
lifecycle.commonJava8 = "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle}"
lifecycle.reactiveStreams = "androidx.lifecycle:lifecycle-reactivestreams-ktx:${versions.lifecycle}"
lifecycle.services = "androidx.lifecycle:lifecycle-service:${versions.lifecycle}"

deps.lifecycle = lifecycle

/**
 * Start google dependencies
 */
def googles = [:]
googles.gson = "com.google.code.gson:gson:${versions.gson}"
googles.material = "com.google.android.material:material:${versions.material}"
googles.mapsService = "com.google.android.gms:play-services-maps:${versions.playServices}"
googles.locationService = "com.google.android.gms:play-services-location:${versions.playServices}"
googles.firebaseAnalytics = "com.google.firebase:firebase-analytics:${versions.firebaseAnalytics}"
googles.firebaseCrashlytics = "com.google.firebase:firebase-crashlytics:${versions.firebaseCrashlytics}"
googles.flexbox = "com.google.android:flexbox:${versions.flexbox}"
googles.bom = "com.google.firebase:firebase-bom:${versions.firebaseBom}"
googles.firebaseAnalyticsBomKtx = "com.google.firebase:firebase-analytics-ktx"
googles.firebaseCrashlyticsBomKtx = "com.google.firebase:firebase-crashlytics-ktx"

deps.google = googles

/**
 * Start glide dependencies
 */
def glide = [:]
glide.glide = "com.github.bumptech.glide:glide:${versions.glide}"
glide.compiler = "com.github.bumptech.glide:compiler:${versions.glide}"

deps.glide = glide

/**
 * Start injections and javax dependencies
 */
def injections = [:]
injections.javaxAnnotation = "javax.annotation:jsr250-api:${versions.javaxAnnotation}"
injections.javaxInject = "javax.inject:javax.inject:${versions.javaxInject}"
injections.dagger = "com.google.dagger:dagger:${versions.dagger}"
injections.daggerCompiler = "com.google.dagger:dagger-compiler:${versions.dagger}"
injections.daggerAndroid = "com.google.dagger:dagger-android-support:${versions.dagger}"
injections.daggerProcessor = "com.google.dagger:dagger-android-processor:${versions.dagger}"
injections.glassFishAnnotaion = "org.glassfish:javax.annotation:${versions.glassFishAnnotation}"

deps.injections = injections

def hilt = [:]
hilt.android = "com.google.dagger:hilt-android:${versions.hilt}"
hilt.compiler = "com.google.dagger:hilt-compiler:${versions.hilt}"

deps.hilt = hilt

/**
 * Start networking dependencies
 */
def network = [:]
network.retrofit = "com.squareup.retrofit2:retrofit:${versions.retrofit}"
network.retrofitConverter = "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
network.okhttp = "com.squareup.okhttp3:okhttp:${versions.okhttp}"
network.okhttpLogger = "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"

deps.network = network

/**
 * Start room dependencies
 */
def room = [:]
room.runtime = "androidx.room:room-runtime:${versions.room}"
room.compiler = "androidx.room:room-compiler:${versions.room}"
room.ktx = "androidx.room:room-ktx:${versions.room}"
room.rxJava = "androidx.room:room-rxjava2:${versions.room}"

deps.room = room


/**
 * Start testing dependencies
 */
def testing = [:]
testing.jUnit = "junit:junit:${versions.jUnit}"
testing.mockitoCore = "org.mockito:mockito-core:${versions.mockitoCore}"
testing.mockitoAndroid = "org.mockito:mockito-android:${versions.mockitoAndroid}"
testing.mockitoKotlin = "org.mockito.kotlin:mockito-kotlin:${versions.mockitoKotlin}"
testing.core = "androidx.test:core:${versions.testCore}"
testing.rules = "androidx.test:rules:${versions.rules}"
testing.extjUnit = "androidx.test.ext:junit:${versions.extjUnit}"
testing.extTruth = "androidx.test.ext:truth:${versions.truth}"
testing.kotlinjUnit = "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"
testing.espressoCore = "androidx.test.espresso:espresso-core:${versions.espresso}"
testing.espressoIntent = "androidx.test.espresso:espresso-intents:${versions.espresso}"
testing.espressoContrib = "androidx.test.espresso:espresso-contrib:${versions.espresso}"
testing.espressoAccessibility = "androidx.test.espresso:espresso-accessibility:${versions.espresso}"
testing.espressoIdling = "androidx.test.espresso:espresso-idling-resource:${versions.espresso}"
testing.archComponent = "androidx.arch.core:core-testing:${versions.archComponent}"
testing.room = "androidx.room:room-testing:${versions.room}"
testing.coroutinesTest = "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutinesTest}"

deps.testing = testing

/**
 * Start additional dependencies if needed
 */
def additional = [:]
additional.slidingButton = "id.ss564.lib.slidingbutton:slidingbutton:${versions.slidingButton}"
additional.mpchart = "com.github.PhilJay:MPAndroidChart:${versions.mpchart}"

deps.additional = additional

ext.deps = deps